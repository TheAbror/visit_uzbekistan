// import 'package:visit_uzbekistan/widget_imports.dart';

// final sl = GetIt.instance;

// Future<void> setUpDependencyInjector() async {
//   // Timetable Service from ApiProvider
//   sl.registerLazySingleton<ScannerService>(() => ApiProvider.scannerService);

//   // Repository
//   sl.registerLazySingleton<ScannerRepository>(
//     () => ScannerRepositoryImpl(sl<ScannerService>()),
//   );

//   // UseCases
//   sl.registerFactory(() => PostQRScannerResultUseCase(sl()));

//   // BLoC
//   sl.registerFactory(
//     () => ScannerBloc(
//       postQRScannerResultUseCase: sl(),
//     ),
//   );
// }


/// [Documentation]

// ðŸ§± Why Domain, Data, Repositories (Clean Architecture)?
// 1. Separation of Concerns
// UI Layer shows data and handles user interaction (Widgets, Blocs).

// Domain Layer holds business logic (UseCases, Entities).

// Data Layer handles how and where data comes from (API, DB, Models, Services etc.).

// ðŸ’¡ Each part has one job â†’ easier to understand, test, and maintain.



// lib/
// â”œâ”€â”€ domain/
// â”‚   â”œâ”€â”€ entities/
// â”‚   â”œâ”€â”€ usecases/
// â”‚   â””â”€â”€ repositories/
// â”œâ”€â”€ data/
// â”‚   â”œâ”€â”€ models/
// â”‚   â”œâ”€â”€ services/
// â”‚   â””â”€â”€ repositories/
// â”œâ”€â”€ presentation/
// â”‚   â”œâ”€â”€ bloc/
// â”‚   â””â”€â”€ screens/
// â””â”€â”€ core/
//     â”œâ”€â”€ error/
//     â”œâ”€â”€ utils/
//     â””â”€â”€ constants/
